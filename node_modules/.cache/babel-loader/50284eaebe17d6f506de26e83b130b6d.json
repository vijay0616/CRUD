{"ast":null,"code":"import { ApiMethods, callApi } from \"../../../utils/api\";\nimport { all, call, fork, put, takeEvery } from \"typed-redux-saga\";\nimport { dashboardSuccess, dashboardFailed } from \"./actions\";\nimport { API_ROUTES } from \"../../../config/api_routes\";\nimport { DashboardActionTypes } from \"./types\";\nexport function* dashboardHandler(action) {\n  try {\n    const response = yield* call(callApi, ApiMethods.GET.toString(), API_ROUTES.GET_DASHBOARD_DATA);\n\n    if (response.error) {\n      yield put(dashboardFailed(response.error));\n    } else {\n      yield put(dashboardSuccess(response));\n    }\n  } catch (e) {\n    if (e instanceof Error && e.stack) yield put(dashboardFailed(e.stack));else yield put(dashboardFailed(\"unknown error.\"));\n  }\n}\n\nfunction* watchDashboardHandler() {\n  yield takeEvery(DashboardActionTypes.DASHBOARD_REQUEST, dashboardHandler);\n}\n\nfunction* dashboardSaga() {\n  yield all([fork(watchDashboardHandler)]);\n}\n\nexport default dashboardSaga;","map":{"version":3,"names":["ApiMethods","callApi","all","call","fork","put","takeEvery","dashboardSuccess","dashboardFailed","API_ROUTES","DashboardActionTypes","dashboardHandler","action","response","GET","toString","GET_DASHBOARD_DATA","error","e","Error","stack","watchDashboardHandler","DASHBOARD_REQUEST","dashboardSaga"],"sources":["/home/ansio-user/vijaypro/web/src/pages/Dashboard/store/sagas.ts"],"sourcesContent":["import { ApiMethods, callApi } from \"../../../utils/api\";\r\nimport { all, call, fork, put, takeEvery } from \"typed-redux-saga\";\r\nimport { dashboardRequest, dashboardSuccess, dashboardFailed } from \"./actions\";\r\n\r\nimport { API_ROUTES } from \"../../../config/api_routes\";\r\nimport { DashboardActionTypes } from \"./types\";\r\n\r\nexport function* dashboardHandler(\r\n  action: ReturnType<typeof dashboardRequest>\r\n): any {\r\n  try {\r\n\r\n    const response = yield* call(\r\n      callApi,\r\n      ApiMethods.GET.toString(),\r\n      API_ROUTES.GET_DASHBOARD_DATA,\r\n    );\r\n    if (response.error) {\r\n      yield put(dashboardFailed(response.error));\r\n    } else {\r\n      yield put(dashboardSuccess(response));\r\n    }\r\n  } catch (e) {\r\n    if (e instanceof Error && e.stack) yield put(dashboardFailed(e.stack));\r\n    else yield put(dashboardFailed(\"unknown error.\"));\r\n  }\r\n}\r\n\r\nfunction* watchDashboardHandler() {\r\n  yield takeEvery(DashboardActionTypes.DASHBOARD_REQUEST, dashboardHandler);\r\n}\r\n\r\nfunction* dashboardSaga(): any {\r\n  yield all([fork(watchDashboardHandler)]);\r\n}\r\n\r\nexport default dashboardSaga;\r\n"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,oBAApC;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,SAA/B,QAAgD,kBAAhD;AACA,SAA2BC,gBAA3B,EAA6CC,eAA7C,QAAoE,WAApE;AAEA,SAASC,UAAT,QAA2B,4BAA3B;AACA,SAASC,oBAAT,QAAqC,SAArC;AAEA,OAAO,UAAUC,gBAAV,CACLC,MADK,EAEA;EACL,IAAI;IAEF,MAAMC,QAAQ,GAAG,OAAOV,IAAI,CAC1BF,OAD0B,EAE1BD,UAAU,CAACc,GAAX,CAAeC,QAAf,EAF0B,EAG1BN,UAAU,CAACO,kBAHe,CAA5B;;IAKA,IAAIH,QAAQ,CAACI,KAAb,EAAoB;MAClB,MAAMZ,GAAG,CAACG,eAAe,CAACK,QAAQ,CAACI,KAAV,CAAhB,CAAT;IACD,CAFD,MAEO;MACL,MAAMZ,GAAG,CAACE,gBAAgB,CAACM,QAAD,CAAjB,CAAT;IACD;EACF,CAZD,CAYE,OAAOK,CAAP,EAAU;IACV,IAAIA,CAAC,YAAYC,KAAb,IAAsBD,CAAC,CAACE,KAA5B,EAAmC,MAAMf,GAAG,CAACG,eAAe,CAACU,CAAC,CAACE,KAAH,CAAhB,CAAT,CAAnC,KACK,MAAMf,GAAG,CAACG,eAAe,CAAC,gBAAD,CAAhB,CAAT;EACN;AACF;;AAED,UAAUa,qBAAV,GAAkC;EAChC,MAAMf,SAAS,CAACI,oBAAoB,CAACY,iBAAtB,EAAyCX,gBAAzC,CAAf;AACD;;AAED,UAAUY,aAAV,GAA+B;EAC7B,MAAMrB,GAAG,CAAC,CAACE,IAAI,CAACiB,qBAAD,CAAL,CAAD,CAAT;AACD;;AAED,eAAeE,aAAf"},"metadata":{},"sourceType":"module"}