[{"/home/ansio-user/vijaypro/web/src/index.tsx":"1","/home/ansio-user/vijaypro/web/src/configureStore.ts":"2","/home/ansio-user/vijaypro/web/src/Main.tsx":"3","/home/ansio-user/vijaypro/web/src/App.tsx":"4","/home/ansio-user/vijaypro/web/src/stores/index.ts":"5","/home/ansio-user/vijaypro/web/src/pages/Dashboard/DashboardContainer.tsx":"6","/home/ansio-user/vijaypro/web/src/pages/Dashboard/store/sagas.ts":"7","/home/ansio-user/vijaypro/web/src/pages/Dashboard/store/reducer.ts":"8","/home/ansio-user/vijaypro/web/src/pages/Dashboard/store/actions.ts":"9","/home/ansio-user/vijaypro/web/src/pages/Dashboard/Dashboard.tsx":"10","/home/ansio-user/vijaypro/web/src/pages/Dashboard/store/types.ts":"11","/home/ansio-user/vijaypro/web/src/config/api_routes.ts":"12","/home/ansio-user/vijaypro/web/src/utils/api.ts":"13","/home/ansio-user/vijaypro/web/src/pages/Form/store/reducer.ts":"14","/home/ansio-user/vijaypro/web/src/pages/Form/store/sagas.ts":"15","/home/ansio-user/vijaypro/web/src/pages/Form/store/types.ts":"16","/home/ansio-user/vijaypro/web/src/pages/Form/store/actions.ts":"17","/home/ansio-user/vijaypro/web/src/pages/Form/FormContainer.tsx":"18","/home/ansio-user/vijaypro/web/src/pages/Form/Form.tsx":"19","/home/ansio-user/vijaypro/web/src/components/TextFieldComponent/index.tsx":"20","/home/ansio-user/vijaypro/web/src/utils/url-helpers.ts":"21"},{"size":530,"mtime":1625639368194,"results":"22","hashOfConfig":"23"},{"size":1174,"mtime":1655918101055,"results":"24","hashOfConfig":"23"},{"size":482,"mtime":1629866827864,"results":"25","hashOfConfig":"23"},{"size":2108,"mtime":1656139552527,"results":"26","hashOfConfig":"23"},{"size":987,"mtime":1656140494207,"results":"27","hashOfConfig":"23"},{"size":770,"mtime":1656138813335,"results":"28","hashOfConfig":"23"},{"size":1028,"mtime":1656146285409,"results":"29","hashOfConfig":"23"},{"size":1489,"mtime":1656006052047,"results":"30","hashOfConfig":"23"},{"size":612,"mtime":1656143100509,"results":"31","hashOfConfig":"23"},{"size":3689,"mtime":1656139670045,"results":"32","hashOfConfig":"23"},{"size":682,"mtime":1655953096924,"results":"33","hashOfConfig":"23"},{"size":130,"mtime":1656136200936,"results":"34","hashOfConfig":"23"},{"size":1184,"mtime":1656147992624,"results":"35","hashOfConfig":"23"},{"size":2551,"mtime":1656139391476,"results":"36","hashOfConfig":"23"},{"size":2106,"mtime":1656148893736,"results":"37","hashOfConfig":"23"},{"size":874,"mtime":1656138703690,"results":"38","hashOfConfig":"23"},{"size":1233,"mtime":1656147758900,"results":"39","hashOfConfig":"23"},{"size":554,"mtime":1656105554363,"results":"40","hashOfConfig":"23"},{"size":3512,"mtime":1656139952966,"results":"41","hashOfConfig":"23"},{"size":949,"mtime":1656087889155,"results":"42","hashOfConfig":"23"},{"size":277,"mtime":1627631480741,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"2n3ten",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/home/ansio-user/vijaypro/web/src/index.tsx",[],[],"/home/ansio-user/vijaypro/web/src/configureStore.ts",[],"/home/ansio-user/vijaypro/web/src/Main.tsx",[],"/home/ansio-user/vijaypro/web/src/App.tsx",[],"/home/ansio-user/vijaypro/web/src/stores/index.ts",["92","93"],"import { RouterState, connectRouter } from \"connected-react-router\";\r\nimport { all, fork } from \"redux-saga/effects\";\r\nimport { History } from \"history\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nimport { DashboardDataRequest } from \"../pages/Dashboard/store/types\";\r\nimport dashboardReducer from \"../pages/Dashboard/store/reducer\";\r\nimport dashboardSaga from \"../pages/Dashboard/store/sagas\";\r\n\r\nimport { FormDataRequest } from \"../pages/Form/store/types\";\r\nimport formReducer from \"../pages/Form/store/reducer\";\r\nimport formSaga from \"../pages/Form/store/sagas\";\r\n\r\nexport interface ApplicationState {\r\n  dashboardReducer: DashboardDataRequest;\r\n  formReducer: FormDataRequest;\r\n  router: RouterState;\r\n}\r\n\r\nexport const createRootReducer = (history: History): any => {\r\n  return combineReducers({\r\n    dashboardReducer,\r\n    formReducer,\r\n    router: connectRouter(history),\r\n  });\r\n};\r\n\r\nexport function* rootSaga(): any {\r\n  yield all([fork(dashboardSaga), fork(formSaga)]);\r\n}\r\n","/home/ansio-user/vijaypro/web/src/pages/Dashboard/DashboardContainer.tsx",[],"/home/ansio-user/vijaypro/web/src/pages/Dashboard/store/sagas.ts",["94","95"],"import { ApiMethods, callApi } from \"../../../utils/api\";\r\nimport { all, call, fork, put, takeEvery } from \"typed-redux-saga\";\r\nimport { dashboardSuccess, dashboardFailed } from \"./actions\";\r\n\r\nimport { API_ROUTES } from \"../../../config/api_routes\";\r\nimport { DashboardActionTypes } from \"./types\";\r\n\r\nexport function* dashboardHandler(): any {\r\n  try {\r\n    const response = yield* call(\r\n      callApi,\r\n      ApiMethods.GET.toString(),\r\n      API_ROUTES.GET_DASHBOARD_DATA\r\n    );\r\n\r\n    if (response.error) {\r\n      yield put(dashboardFailed(response.error));\r\n    } else {\r\n      yield put(dashboardSuccess(response));\r\n    }\r\n  } catch (e) {\r\n    if (e instanceof Error && e.stack) yield put(dashboardFailed(e.stack));\r\n    else yield put(dashboardFailed(\"unknown error.\"));\r\n  }\r\n}\r\n\r\nfunction* watchDashboardHandler() {\r\n  yield takeEvery(DashboardActionTypes.DASHBOARD_REQUEST, dashboardHandler);\r\n}\r\n\r\nfunction* dashboardSaga(): any {\r\n  yield all([fork(watchDashboardHandler)]);\r\n}\r\n\r\nexport default dashboardSaga;\r\n","/home/ansio-user/vijaypro/web/src/pages/Dashboard/store/reducer.ts",[],"/home/ansio-user/vijaypro/web/src/pages/Dashboard/store/actions.ts",[],"/home/ansio-user/vijaypro/web/src/pages/Dashboard/Dashboard.tsx",["96","97"],"import React, { useEffect } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport Grid from \"@mui/material/Grid\";\nimport Modal from \"@mui/material/Modal\";\nimport { DataValue } from \"./store/types\";\nimport { TextFieldComponent } from \"../../components/TextFieldComponent\";\nimport Alert from \"@mui/material/Alert\";\nimport \"./dashboard.css\";\n\nexport const Dashboard = (props: any): JSX.Element => {\n  const {\n    dashboardRequest,\n    dashboardReducer,\n    formReducer,\n    formData,\n    formUpdateRequest,\n    formRest,\n    modalChange,\n  } = props;\n\n  const { dataRecords } = dashboardReducer;\n\n  const handleOpen = (data: DataValue) => {\n    formData(data);\n    modalChange(true);\n  };\n\n  const handleClose = () => modalChange(false);\n\n  useEffect(() => {\n    formRest();\n    dashboardRequest();\n  }, []);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    formData({ ...formReducer.formData, [name]: value });\n  };\n\n  const submitForm = (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    formUpdateRequest(formReducer.formData);\n  };\n\n  if (formReducer.success) {\n    setTimeout(() => {\n      formRest();\n    }, 3000);\n  }\n\n  return (\n    <Box sx={{ minWidth: 275, marginTop: 10 }}>\n      <Grid container spacing={2}>\n        {dataRecords.map((data: DataValue, index: number) => (\n          <Grid item xs={12} key={index}>\n            <Card variant=\"outlined\">\n              <CardContent>\n                <Button\n                  sx={{ float: \"right\" }}\n                  onClick={() => handleOpen(data)}\n                >\n                  Edit\n                </Button>\n                <Typography variant=\"h5\" component=\"div\">\n                  {data.userId}-{data.id}-{data.title}\n                </Typography>\n                <Typography variant=\"body2\">{data.body}</Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n\n      <Modal\n        open={formReducer.modal}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box className=\"modal-box\">\n          <div className=\"message_width\">\n            {formReducer.success && (\n              <div className=\"message_width\">\n                <Alert\n                  severity={formReducer.success ? \"success\" : \"error\"}\n                >{`Success.. ID-${formReducer.successMessage.id} Updated`}</Alert>\n              </div>\n            )}\n          </div>\n\n          <form onSubmit={submitForm} className=\"form_section\">\n            <h2>Update Resource</h2>\n\n            <TextFieldComponent\n              color=\"primary\"\n              id=\"text-title\"\n              name=\"title\"\n              label=\"Title\"\n              className=\"input_size\"\n              onchangeHandler={handleChange}\n              value={formReducer.formData.title ?? \"\"}\n              required={true}\n            />\n\n            <TextFieldComponent\n              color=\"primary\"\n              id=\"text-body\"\n              name=\"body\"\n              label=\"Body\"\n              multiline={true}\n              className=\"input_size\"\n              value={formReducer.formData.body ?? \"\"}\n              onchangeHandler={handleChange}\n              required={true}\n            />\n\n            <Button type=\"submit\" variant=\"contained\">\n              Submit\n            </Button>\n          </form>\n        </Box>\n      </Modal>\n    </Box>\n  );\n};\n","/home/ansio-user/vijaypro/web/src/pages/Dashboard/store/types.ts",[],"/home/ansio-user/vijaypro/web/src/config/api_routes.ts",[],"/home/ansio-user/vijaypro/web/src/utils/api.ts",["98","99","100","101","102","103"],"export enum ApiMethods {\r\n  GET = \"GET\",\r\n  POST = \"POST\",\r\n  PUT = \"PUT\",\r\n}\r\n\r\nexport async function callApi(\r\n  method: string,\r\n  url: string,\r\n  data?: any\r\n): Promise<any> {\r\n  const fullApiUrl = `${\r\n    process.env.REACT_APP_API_BASE_URL ?? \"http://localhost:3001\"\r\n  }${url}`;\r\n  const res = await fetch(fullApiUrl, {\r\n    method,\r\n    mode: \"cors\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(data),\r\n  });\r\n\r\n  if (res.status !== 200) {\r\n    const badResponse = await res.json();\r\n    return { error: badResponse };\r\n  }\r\n  return res.json();\r\n}\r\n\r\nexport async function uploadApi(\r\n  method: string,\r\n  url: string,\r\n  data?: any\r\n): Promise<any> {\r\n  const fullApiUrl = `${\r\n    process.env.REACT_APP_API_BASE_URL ?? \"http://localhost:3001\"\r\n  }${url}`;\r\n  const response = await fetch(fullApiUrl, {\r\n    method,\r\n    mode: \"cors\",\r\n    body: data,\r\n  });\r\n  if (response.status !== 200) {\r\n    const badResponse = await response.json();\r\n    return { result: badResponse };\r\n  } else {\r\n    const importResponse = await response.json();\r\n    return { result: importResponse };\r\n  }\r\n}\r\n","/home/ansio-user/vijaypro/web/src/pages/Form/store/reducer.ts",[],"/home/ansio-user/vijaypro/web/src/pages/Form/store/sagas.ts",["104","105","106"],"/home/ansio-user/vijaypro/web/src/pages/Form/store/types.ts",[],"/home/ansio-user/vijaypro/web/src/pages/Form/store/actions.ts",[],"/home/ansio-user/vijaypro/web/src/pages/Form/FormContainer.tsx",[],"/home/ansio-user/vijaypro/web/src/pages/Form/Form.tsx",["107","108","109"],"import React, { useEffect } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Container from \"@mui/material/Container\";\nimport Button from \"@mui/material/Button\";\nimport Grid from \"@mui/material/Grid\";\nimport { TextFieldComponent } from \"../../components/TextFieldComponent\";\nimport Alert from \"@mui/material/Alert\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport \"./style.css\";\n\nexport const Form = (props: any): JSX.Element => {\n  const { formReducer, formData, formRequest, formRest } = props;\n\n  const users = formReducer.users;\n\n  const handleChange = (\n    event: SelectChangeEvent | React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const { name, value } = event.target;\n    formData({ ...formReducer.formData, [name]: value });\n  };\n\n  const submitForm = (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    formRequest(formReducer.formData);\n  };\n\n  if (formReducer.success) {\n    setTimeout(() => {\n      formRest();\n    }, 3000);\n  }\n  useEffect(() => {\n    formRest();\n  }, []);\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Box>\n        <Grid container spacing={2}>\n          <Grid item xs={12} className=\"mt-5 center\">\n            {formReducer.success && (\n              <div className=\"message_width\">\n                <Alert\n                  severity={formReducer.success ? \"success\" : \"error\"}\n                >{`Success.. ID-${formReducer.successMessage.id} created`}</Alert>\n              </div>\n            )}\n\n            <form onSubmit={submitForm} className=\"form_section\">\n              <h2>Add New Resource</h2>\n              <FormControl className=\"input_size\">\n                <InputLabel id=\"demo-simple-select-label\">User Id</InputLabel>\n                <Select\n                  labelId=\"demo-simple-select-label\"\n                  id=\"demo-simple-select\"\n                  label=\"User Id\"\n                  onChange={handleChange}\n                  name=\"userId\"\n                  value={formReducer.formData.userId ?? \"\"}\n                  required={true}\n                >\n                  <MenuItem value=\"\" hidden>\n                    Select User ID\n                  </MenuItem>\n                  {users.map((user: any, index: number) => (\n                    <MenuItem value={user.id} key={index}>\n                      {user.id}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n\n              <TextFieldComponent\n                color=\"primary\"\n                id=\"text-title\"\n                name=\"title\"\n                label=\"Title\"\n                className=\"input_size\"\n                onchangeHandler={handleChange}\n                value={formReducer.formData.title ?? \"\"}\n                required={true}\n              />\n\n              <TextFieldComponent\n                color=\"primary\"\n                id=\"text-body\"\n                name=\"body\"\n                label=\"Body\"\n                multiline={true}\n                className=\"input_size\"\n                value={formReducer.formData.body ?? \"\"}\n                onchangeHandler={handleChange}\n                required={true}\n              />\n\n              <Button type=\"submit\" variant=\"contained\">\n                Submit\n              </Button>\n            </form>\n          </Grid>\n        </Grid>\n      </Box>\n    </Container>\n  );\n};\n","/home/ansio-user/vijaypro/web/src/components/TextFieldComponent/index.tsx",[],"/home/ansio-user/vijaypro/web/src/utils/url-helpers.ts",[],{"ruleId":"110","severity":1,"message":"111","line":20,"column":54,"nodeType":"112","messageId":"113","endLine":20,"endColumn":57,"suggestions":"114"},{"ruleId":"110","severity":1,"message":"111","line":28,"column":30,"nodeType":"112","messageId":"113","endLine":28,"endColumn":33,"suggestions":"115"},{"ruleId":"110","severity":1,"message":"111","line":8,"column":38,"nodeType":"112","messageId":"113","endLine":8,"endColumn":41,"suggestions":"116"},{"ruleId":"110","severity":1,"message":"111","line":31,"column":28,"nodeType":"112","messageId":"113","endLine":31,"endColumn":31,"suggestions":"117"},{"ruleId":"118","severity":1,"message":"119","line":14,"column":27,"nodeType":"120","messageId":"121","endLine":14,"endColumn":37},{"ruleId":"110","severity":1,"message":"111","line":14,"column":34,"nodeType":"112","messageId":"113","endLine":14,"endColumn":37,"suggestions":"122"},{"ruleId":"118","severity":1,"message":"123","line":10,"column":3,"nodeType":"120","messageId":"121","endLine":10,"endColumn":13},{"ruleId":"110","severity":1,"message":"111","line":10,"column":10,"nodeType":"112","messageId":"113","endLine":10,"endColumn":13,"suggestions":"124"},{"ruleId":"110","severity":1,"message":"111","line":11,"column":12,"nodeType":"112","messageId":"113","endLine":11,"endColumn":15,"suggestions":"125"},{"ruleId":"118","severity":1,"message":"123","line":35,"column":3,"nodeType":"120","messageId":"121","endLine":35,"endColumn":13},{"ruleId":"110","severity":1,"message":"111","line":35,"column":10,"nodeType":"112","messageId":"113","endLine":35,"endColumn":13,"suggestions":"126"},{"ruleId":"110","severity":1,"message":"111","line":36,"column":12,"nodeType":"112","messageId":"113","endLine":36,"endColumn":15,"suggestions":"127"},{"ruleId":"110","severity":1,"message":"111","line":13,"column":71,"nodeType":"112","messageId":"113","endLine":13,"endColumn":74,"suggestions":"128"},{"ruleId":"110","severity":1,"message":"111","line":36,"column":4,"nodeType":"112","messageId":"113","endLine":36,"endColumn":7,"suggestions":"129"},{"ruleId":"110","severity":1,"message":"111","line":69,"column":23,"nodeType":"112","messageId":"113","endLine":69,"endColumn":26,"suggestions":"130"},{"ruleId":"118","severity":1,"message":"119","line":14,"column":22,"nodeType":"120","messageId":"121","endLine":14,"endColumn":32},{"ruleId":"110","severity":1,"message":"111","line":14,"column":29,"nodeType":"112","messageId":"113","endLine":14,"endColumn":32,"suggestions":"131"},{"ruleId":"110","severity":1,"message":"111","line":69,"column":37,"nodeType":"112","messageId":"113","endLine":69,"endColumn":40,"suggestions":"132"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["133","134"],["135","136"],["137","138"],["139","140"],"@typescript-eslint/explicit-module-boundary-types","Argument 'props' should be typed with a non-any type.","Identifier","anyTypedArg",["141","142"],"Argument 'data' should be typed with a non-any type.",["143","144"],["145","146"],["147","148"],["149","150"],["151","152"],["153","154"],["155","156"],["157","158"],["159","160"],{"messageId":"161","fix":"162","desc":"163"},{"messageId":"164","fix":"165","desc":"166"},{"messageId":"161","fix":"167","desc":"163"},{"messageId":"164","fix":"168","desc":"166"},{"messageId":"161","fix":"169","desc":"163"},{"messageId":"164","fix":"170","desc":"166"},{"messageId":"161","fix":"171","desc":"163"},{"messageId":"164","fix":"172","desc":"166"},{"messageId":"161","fix":"173","desc":"163"},{"messageId":"164","fix":"174","desc":"166"},{"messageId":"161","fix":"175","desc":"163"},{"messageId":"164","fix":"176","desc":"166"},{"messageId":"161","fix":"177","desc":"163"},{"messageId":"164","fix":"178","desc":"166"},{"messageId":"161","fix":"179","desc":"163"},{"messageId":"164","fix":"180","desc":"166"},{"messageId":"161","fix":"181","desc":"163"},{"messageId":"164","fix":"182","desc":"166"},{"messageId":"161","fix":"183","desc":"163"},{"messageId":"164","fix":"184","desc":"166"},{"messageId":"161","fix":"185","desc":"163"},{"messageId":"164","fix":"186","desc":"166"},{"messageId":"161","fix":"187","desc":"163"},{"messageId":"164","fix":"188","desc":"166"},{"messageId":"161","fix":"189","desc":"163"},{"messageId":"164","fix":"190","desc":"166"},{"messageId":"161","fix":"191","desc":"163"},{"messageId":"164","fix":"192","desc":"166"},"suggestUnknown",{"range":"193","text":"194"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"193","text":"195"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"196","text":"194"},{"range":"196","text":"195"},{"range":"197","text":"194"},{"range":"197","text":"195"},{"range":"198","text":"194"},{"range":"198","text":"195"},{"range":"199","text":"194"},{"range":"199","text":"195"},{"range":"200","text":"194"},{"range":"200","text":"195"},{"range":"201","text":"194"},{"range":"201","text":"195"},{"range":"202","text":"194"},{"range":"202","text":"195"},{"range":"203","text":"194"},{"range":"203","text":"195"},{"range":"204","text":"194"},{"range":"204","text":"195"},{"range":"205","text":"194"},{"range":"205","text":"195"},{"range":"206","text":"194"},{"range":"206","text":"195"},{"range":"207","text":"194"},{"range":"207","text":"195"},{"range":"208","text":"194"},{"range":"208","text":"195"},[766,769],"unknown","never",[924,927],[340,343],[940,943],[563,566],[157,160],[173,176],[722,725],[738,741],[460,463],[1094,1097],[2002,2005],[593,596],[2361,2364]]